using BunnyNet;

var bunny = Bunny.Configure(new BunnyConfiguration(...));

// Create subscribers
ISubscriber subscriber = bunny.Subscriber.CreateForPubSub(...)
ISubscriber subscriber = bunny.Subscriber.CreateForWork(...)


subscriber.Handle(async message => {
    
    return Result.Error();
    return Result.Retry("", 4);
    return Result.Ok();
})

class SubscriberOptions
{
    Exchange exchange;
    Queue queue;
    ErrorHandlingPolicy errorHandlingPolicy = null;
    ushort prefetchCount = 1;
    Dictionary<string, object> headers = null;
    Topics
}





          


// Create publisher
IPublisher publisher = bunny.Publisher.Create(...)

publisher.Send({})
         











// Model operations

bunny.Exchange.Declare()

bunny.Exchange.Bind(exchange1, exchange2, topics?...);

bunny.Queue.Declare()

bunny.Queue.Bind(queueName, exchangeName, topics?...)

bunny.Queue.Unbind()

bunny.Queue.Delete()